Нам предстоит разработать программный продукт, который дает рекомендации товаров, на основе введенных данных Программный продукт должен иметь следующие характеристики:

1)ввод параметров для поиска рекомендаций;

2) загрузка параметров для поиска из файла .csv, содержащего информацию о пользователе; 3) по введенным параметрам выводить рекомендованные товары и услуги;

В качестве базы данных, мы будем использовать таблицу полученную в предыдущей сессии И библиотеки Pandas для работы с табличными данными и Tkinter - для разработки графического интерфейса приложения

 

import pandas as pd              #библиотека для работы с большими файлами

import matplotlib.pyplot as plt  #библиотека для работы с визуализацией данных

import tkinter

from tkinter import *

df = pd.read_csv('category.csv') #создание первого датафрейма содержащего в себе значения файла train_1

df[df.City == "Perm"]                            #вывод на экран результата

df.drop(columns = ['PROD_TYPE', 'MM_IN_BANK', 'MM_W_CARD', 'EDUCATION_LEVEL', 'TRANS_DTTM'], inplace = True) #удаление лишних столбцов

df
Имея данный набор данных, и модель классификации пользователей, заранее продумываем как будет работать наше приложение. В нашем случае, мы сделаем следующее: пользователь будет вводить свой возраст и город, и на основе этих данных ему выведется рекомендованное место покупки с его описанием.

 

#импорт библиотек

from tkinter import *               

from tkinter import messagebox 

 

#создание окна

window = Tk()                  

window.title("Рекомендованные услуги") 

window.geometry('400x220')

 

 

#сохдание функции при нажатии

def clicked():

    #переменные содержащие введенные данные Sochi 22

    age = int(txt1.get())

    city = txt2.get()

   

    #сортировка данных по возрасту

    info_lok = df[df['AGE'] == age]

    info_lok.reset_index(drop = True, inplace = True)

    #проверка на совпадение города и возраста

    count_city = len(info_lok[info_lok['City'] == city])

#     len_info_lok = len(info_lok)

 

    #выделение значимых атрибутов

    address = info_lok.LOCATION_NAME[0]

    category = info_lok.Category[0]

    summ = info_lok.SUM_TRANS[0]

    city_add = info_lok.City[0]

 

#условие: Если данные города и возраста совпадают, выводит результат с информацией по городу,

#если же нет, тогда выводить другие доступные параметры

#так же предусмотрено условие, если пользователь не ввел город   

    if count_city > 0 or city == "":

        messagebox.showinfo('Рекомендация', 'На сонове введенных данных мы рекомендуем вам посетить \

заведение {},\

в городе {} ,\

со средним чеком - {}, \

находящееся по адресу: {}'.format(category, city_add, summ, address))   #всплывающее окно

   

    else:

        messagebox.showinfo('Рекомендация', 'На сонове введенных данных мы рекомендуем вам посетить \

заведение {},\

со средним чеком - {},\

находящееся по адресу: {}, или похожие на него.'.format(category, summ, address))   #всплывающее окно

   

 

#Надпись

lbl1 = Label(window, text="Введите ваш \n возраст:", font=("Arial Bold",10))  

lbl1.place(x = 10, y = 10, width = 100, height = 50) 

 

#Поле для ввода

txt1 = Entry(window, width=101) 

txt1.insert(INSERT, '22')

txt1.place(x = 120, y = 10, width = 250, height = 50) 

 

#Надпись

lbl2 = Label(window, text="Введите ваш \n город \n (на английском):", font=("Arial Bold",10))  

lbl2.place(x = 10, y = 70, width = 100, height = 50) 

 

#Поле для ввода

txt2 = Entry(window, width=101) 

txt2.insert(INSERT, 'Sochi')

txt2.place(x = 120, y = 70, width = 250, height = 50) 

 

# spin = Spinbox(window, from_=0, to=10, width=5) 

# spin.grid(column=0, row=0) 

 

#кнопка

Button = Button(window, text='Получить рекомендацию', command=clicked).place(x = 50, y = 140, width = 300, height = 50) 

 

#запуск приложения

window.mainloop()
